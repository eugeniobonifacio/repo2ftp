#!/usr/bin/php
<?php

$version = "v2.0.0";

$base_path = dirname(__FILE__);

// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(
    realpath($base_path . '/lib'),
    get_include_path(),
)));

require('repo2ftp/Cli.php');
require('repo2ftp/FTPClient.php');

use repo2ftp\Cli;
use repo2ftp\FTPClient;
use repo2ftp\Repository\RevisionException;

$cli = new Cli($base_path);

$config = $cli->getConfig();
$module = $cli->getModule();

$module_prefix = 'module.' . $module;

$path_repository = $module_prefix . '.path.repository';
$path_ftp = $module_prefix . '.path.ftp';
$path_local = $module_prefix . '.path.local';

$path_exclude = $module_prefix . '.path.exclude';

$cli->output("cli.repository.extracting", $config->get($path_local));

$repo = null;
if($config->get($module_prefix . '.type') == 'svn') {
    require('repo2ftp/Repository/SubversionRepository.php');
    $repo = new \repo2ftp\Repository\SubversionRepository($config->get($path_local), $config->get($path_repository));
}
else if($config->get($module_prefix . '.type') == 'git') {
    require('repo2ftp/Repository/GitRepository.php');
    $repo = new \repo2ftp\Repository\GitRepository($config->get($path_local), $config->get($path_repository));
}

$revision = null;

try {
    $revision = $repo->parseRevision($cli->getRevision());
}
catch(RevisionException $ex) {
    $cli->error('cli.repository.revision.invalid');
}

$exclude = array();

if($config->exists($path_exclude)) {
    $exclude = $config->get($path_exclude);
}

$job = $repo->extract($revision, $exclude);

foreach($job->getFilesToUpload() as $file) {
    $cli->output("cli.job.found.upload", $file);
}

foreach($job->getFilesToDelete() as $file) {
    $cli->output("cli.job.found.delete", $file);
}

if($cli->isDebug()) {
    $cli->message('Debug mode');
    $cli->error('cli.aborted');
}

if(!$cli->confirm()) {
    $cli->error('cli.aborted');
}

$ftp = new FTPClient();

$cli->output("cli.ftp.connecting", $config->get('ftp.host'));
$ftp->open($config->get('ftp.host'));
$cli->output("cli.ok");

$cli->output("cli.ftp.authenticating", $config->get('ftp.username'));
$ftp->login($config->get('ftp.username'), $config->get('ftp.password'));
$cli->output("cli.ok");

$base_ftp = $config->get($path_ftp);
$base_local = $config->get($path_local);

foreach($job->getFilesToUpload() as $file) {
    while(true) {
        $cli->output("cli.ftp.uploading", array($file, $base_local, $base_ftp));
        try {
            $ftp->put($file, $base_local, $base_ftp);
            $cli->output("cli.ok");
            break;
        }
        catch(Exception $ex) {
            $cli->output('cli.ftp.uploading.error', $ex->getMessage());
            if(!$cli->confirm()) {
                $cli->error("cli.aborted");
            }
        }
    }
}

foreach($job->getFilesToDelete() as $file) {
    $cli->output("cli.ftp.deleting", $file);
    
    try {
        $ftp->delete($file, $base_ftp);
        $cli->output("cli.ok");
    }
    catch(Exception $ex) {
        $cli->output('cli.ftp.deleting.error', $ex->getMessage());
        if(!$cli->confirm()) {
            $cli->error("cli.aborted");
        }
    }
}

$ftp->close();

$cli->output("cli.done");