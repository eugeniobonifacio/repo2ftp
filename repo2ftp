#!/usr/bin/php
<?php

use repo2ftp\Cli;
use repo2ftp\SubversionRepository;
use repo2ftp\FTPClient;

$version = "v2.0.0";

require('lib/repo2ftp/Cli.php');
require('lib/repo2ftp/FTPClient.php');

$base_path = dirname(__FILE__);

$cli = new Cli($base_path);

$config = $cli->getConfig();

$cli->output("cli.repository.extracting", $config->get('path.base.local'));

$repo = null;
if($config->get('repository.type') == 'svn') {
    require('lib/repo2ftp/Repository/SubversionRepository.php');
    $repo = new SubversionRepository($config->get('path.base.local'), $config->get('path.base.repository'));
}
else if($config->get('repository.type') == 'git') {
    require('lib/repo2ftp/Repository/GitRepository.php');
    $repo = new GitRepository($config->get('path.base.local'), $config->get('path.base.repository'));
}

$job = $repo->extract($cli->getRevision());

foreach($job->getFilesToUpload() as $file) {
    $cli->output("cli.job.found.upload", $file);
}

foreach($job->getFilesToDelete() as $file) {
    $cli->output("cli.job.found.delete", $file);
}

if($cli->isDebug()) {
    $cli->message('Debug mode');
    $cli->error('cli.aborted');
}

if(!$cli->confirm()) {
    $cli->error('cli.aborted');
}

$ftp = new FTPClient();

$cli->output("cli.ftp.connecting", $config->get('ftp.host'));
$ftp->open($config->get('ftp.host'));
$cli->output("cli.ok");

$cli->output("cli.ftp.authenticating", $config->get('ftp.username'));
$ftp->login($config->get('ftp.username'), $config->get('ftp.password'));
$cli->output("cli.ok");

$base_ftp = $config->get('path.base.ftp');
$base_local = $config->get('path.base.local');

foreach($job->getFilesToUpload() as $file) {
    $cli->output("cli.ftp.uploading", $file);
    
    try {
        $ftp->put($file, $base_local, $base_ftp);
        $cli->output("cli.ok");
    }
    catch(Exception $ex) {
        $cli->output('cli.ftp.uploading.error', $ex->getMessage());
        if(!$cli->confirm()) {
            $cli->error("cli.aborted");
        }
    }
}

foreach($job->getFilesToDelete() as $file) {
    $cli->output("cli.ftp.deleting", $file);
    
    try {
        $ftp->delete($file, $base_ftp);
        $cli->output("cli.ok");
    }
    catch(Exception $ex) {
        $cli->output('cli.ftp.deleting.error', $ex->getMessage());
        if(!$cli->confirm()) {
            $cli->error("cli.aborted");
        }
    }
}

$ftp->close();

$cli->output("cli.done");