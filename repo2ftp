#!/usr/bin/php
<?php

$base_path = dirname(__FILE__);

// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(
    realpath($base_path . '/lib'),
    get_include_path(),
)));

require('repo2ftp/Cli.php');
require('repo2ftp/Repository/RevisionException.php');
require('repo2ftp/FTPClient.php');

use repo2ftp\Cli;
use repo2ftp\FTPClient;
use repo2ftp\Repository\RevisionException;
use repo2ftp\FTPClient\UnableToDeleteException;
use repo2ftp\FTPClient\ConnectionException;
use repo2ftp\FTPClient\CommandException;

$cli = new Cli($base_path);

$config = $cli->getConfig();
$module = $cli->getModule();

$module_prefix = 'module.' . $module;

$path_repository = $module_prefix . '.path.repository';
$path_ftp = $module_prefix . '.path.ftp';
$path_local = $module_prefix . '.path.local';

$path_exclude = $module_prefix . '.path.exclude';

$cli->outputnl("cli.repository.extracting", $config->get($path_local));

$repo = null;
if($config->get($module_prefix . '.type') == 'svn') {
    require('repo2ftp/Repository/SubversionRepository.php');
    $repo = new \repo2ftp\Repository\SubversionRepository($config->get($path_local), $config->get($path_repository));
}
else if($config->get($module_prefix . '.type') == 'git') {
    require('repo2ftp/Repository/GitRepository.php');
    $repo = new \repo2ftp\Repository\GitRepository($config->get($path_local), $config->get($path_repository));
}

$revision = null;

try {
    $revision = $repo->parseRevision($cli->getRevision());
}
catch(RevisionException $ex) {
    $cli->error('cli.repository.revision.invalid');
}

$revisions = explode('..', $revision);

$last_revision = null;
if(count($revisions) == 1) {
    $last_revision = $revisions[0];
}
else {
    $last_revision = $revisions[1];
}

$exclude = array();

if($config->exists($path_exclude)) {
    $exclude = $config->get($path_exclude);
}

$job = $repo->extract($revision, $exclude);

if($cli->haveToUpload()) {
    foreach($job->getFilesToUpload() as $file) {
        $cli->outputnl("cli.job.found.upload", $file);
    }
}

if($cli->haveToDelete()) {
    foreach($job->getFilesToDelete() as $file) {
        $cli->outputnl("cli.job.found.delete", $file);
    }
}

if($cli->isDebug()) {
    $cli->message('Debug mode');
    $cli->error('cli.aborted');
}

if(!$cli->confirm()) {
    $cli->error('cli.aborted');
}

$ftp = new FTPClient();

$cli->outputnl("cli.ftp.connecting", $config->get('ftp.host'));
$ftp->open($config->get('ftp.host'));
$cli->outputnl("cli.ok");

$cli->outputnl("cli.ftp.authenticating", $config->get('ftp.username'));
$ftp->login($config->get('ftp.username'), $config->get('ftp.password'));
$cli->outputnl("cli.ok");

$base_ftp = $config->get($path_ftp);
$base_local = $config->get($path_local);

$tmp_local_file = 'repo2ftp.tmp';

$cli->outputnl(":");

if($cli->haveToUpload()) {
    
    $i = 1;
    $files = $job->getFilesToUpload();
    $count = count($files);

    foreach($files as $file) {

        while(true) {

            $cli->output(":" . $i . "/" . $count . " ==> ");
            $cli->outputnl("cli.ftp.uploading", array($file, $base_local, $base_ftp));

            try {            

                if(is_file($base_local . DIRECTORY_SEPARATOR . $file)) {

                    $dir = dirname($file);

                    if($dir != '.') {
                        $ftp->mkdir($dir, $base_ftp);
                    }
                }

                $tmp_file = $repo->get($file, $last_revision);            
                file_put_contents($tmp_local_file, $tmp_file);

                $ftp->put($tmp_local_file, '.', $base_ftp, $file);

                $cli->output(":" . $i . "/" . $count . " ==> ");
                $cli->outputnl("cli.ok");
                $cli->outputnl(":");

                $i++;
                break;
            }
            catch(Exception $ex) {
                $cli->outputnl('cli.ftp.uploading.error', $ex->getMessage());

                if(!$cli->confirm()) {
                    $cli->error("cli.aborted");
                }

                $cli->outputnl('cli.ftp.reconnect', $ex->getMessage());

                if($cli->confirm()) {
                    $ftp->close();

                    $cli->outputnl("cli.ftp.connecting", $config->get('ftp.host'));
                    $ftp->open($config->get('ftp.host'));
                    $cli->outputnl("cli.ok");

                    $cli->outputnl("cli.ftp.authenticating", $config->get('ftp.username'));
                    $ftp->login($config->get('ftp.username'), $config->get('ftp.password'));
                    $cli->outputnl("cli.ok");
                }
            }
        }
    }
}

if($cli->haveToDelete()) {
    $i = 1;
    $files = $job->getFilesToDelete();
    $count = count($files);

    foreach($files as $file) {
        while(true) {

            $cli->output(":" . $i . "/" . $count . " ==> ");
            $cli->outputnl("cli.ftp.deleting", $file);

            try {
                $ftp->delete($file, $base_ftp);
                $cli->outputnl("cli.ok");
                $cli->outputnl(":");

                $i++;
                break;
            }
            catch(UnableToDeleteException $ex) {

                $cli->outputnl('cli.ftp.deleting.error', $ex->getMessage());
                $cli->outputnl(":");

                $i++;
                break;                
            }
            catch(Exception $ex) {

                $cli->outputnl('cli.ftp.deleting.error', $ex->getMessage());

                if(!$cli->confirm()) {
                    $cli->error("cli.aborted");
                }

                $cli->outputnl('cli.ftp.reconnect', $ex->getMessage());

                if($cli->confirm()) {
                    $ftp->close();

                    $cli->outputnl("cli.ftp.connecting", $config->get('ftp.host'));
                    $ftp->open($config->get('ftp.host'));
                    $cli->outputnl("cli.ok");

                    $cli->outputnl("cli.ftp.authenticating", $config->get('ftp.username'));
                    $ftp->login($config->get('ftp.username'), $config->get('ftp.password'));
                    $cli->outputnl("cli.ok");
                }
            }
        }
    }
}

$ftp->close();

$cli->outputnl("cli.done");