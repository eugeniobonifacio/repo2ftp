#!/usr/bin/php
<?php

svn2ftp_log("\n ************* SVN2FTP by Eugenio Bonifacio **************\n");

$opts = 'r:c:';

$cli_options = getopt($opts);

$config_options = array();

if(array_key_exists('c', $cli_options)) {
    $config = $cli_options['c'];

    $config_path = realpath(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . $config . '.ini');
    
    svn2ftp_log("File di configurazione: " . $config_path);
    
    $config_options = parse_ini_file($config_path);    
}
else {
    die("specificare un file di configurazione con l'opzione '-c'\n");
}

// controllo esistenza opzioni
$options = array('ftp.host', 'ftp.username', 'ftp.password', 'path.base.local', 'path.base.svn', 'path.base.ftp');
foreach ($options as $option) {
    if(!array_key_exists($option, $config_options)) {
        die("Opzione $option non trovata!");
    }
}

svn2ftp_log("File OK");


$ftp_host = $config_options['ftp.host'];
$ftp_username = $config_options['ftp.username'];
$ftp_password = $config_options['ftp.password'];

$base_local = $config_options['path.base.local'];
$base_svn = $config_options['path.base.svn'];
$base_ftp = $config_options['path.base.ftp'];

$revision = 'HEAD';
if(array_key_exists('r', $cli_options)) {
    $revision = $cli_options['r'];
}

$svn_command = "svn log -r $revision -v " . $base_local;

svn2ftp_log("Revisione da estrarre: $revision");
svn2ftp_log("Recupero informazioni da SVN: " . $svn_command);

$output = shell_exec($svn_command);

$lines = explode("\n", $output);

$files_upload = array();
$files_delete = array();
for($i = 3; $i < count($lines); $i++) {
    if(preg_match('/^   ([A-Z]{1}) (\/.*)$/', $lines[$i], $matched)) {
        if($matched[1] == 'A' || $matched[1] == 'M') {

            $file = $matched[2];
            if(strpos($file, $base_svn) === 0) {
                
                $file_relative_path = substr($file, strlen($base_svn));
                
                $file_local = $base_local . $file_relative_path;
                $file_ftp = $base_ftp . substr($file, strlen($base_svn));
                
                $k = md5($file_local . $file_ftp);
                
                if(!array_key_exists($k, $files_upload)) {
                    svn2ftp_log("Trovato file da caricare: " . $file_relative_path);
                    $files_upload[$k] = array('type' => is_dir($file_local) ? 'dir':'file', 'local' => $file_local, 'remote' => $file_ftp);
                }
            }
            
        }
        elseif($matched[1] == 'D') {
            $file = $matched[2];
            if(strpos($file, $base_svn) === 0) {
                
                $file_relative_path = substr($file, strlen($base_svn));
                
                $file_local = $base_local . $file_relative_path;
                $file_ftp = $base_ftp . substr($file, strlen($base_svn));
                
                $k = md5($file_local . $file_ftp);
                
                if(!array_key_exists($k, $files_upload)) {
                    svn2ftp_log("Trovato file da eliminare: " . $file_relative_path);
                    $files_delete[md5($file_local . $file_ftp)] = array('local' => $file_local, 'remote' => $file_ftp);
                }
            }
        }
    }
}

svn2ftp_log("Connessione ftp a $ftp_username@$ftp_host...");

$conn_id = ftp_connect($ftp_host);

if($conn_id === false) {
    svn2ftp_log("Connession fallita!");
    exit();
}

ftp_login($conn_id, $ftp_username, $ftp_password);

svn2ftp_log("Connesso");

svn2ftp_log("Caricamento file...");

foreach($files_upload as $file) {
    svn2ftp_log("++++++++++++++++++++++++++++++++++++++++++++++++++");
    svn2ftp_log($file['local'] . ' -> ' . $file['remote']);
    svn2ftp_log("++++++++++++++++++++++++++++++++++++++++++++++++++");
    
    ftp_chdir($conn_id, $base_ftp);
    
    $file_remote = substr($file['remote'], strlen($base_ftp));
    $path = explode('/', $file_remote);
    array_shift($path);

    $path_local = $base_local;
    $path_remote = $base_ftp;
    
    foreach($path as $dir) {
        $path_remote_prev = $path_remote;
        
        $path_local .= '/' . $dir;
        $path_remote .= '/' . $dir;

//        svn2ftp_log("File locale: " . $path_local);
//        svn2ftp_log("File remoto: " . $path_remote);

        // se è una cartella
        if(is_dir($path_local)) {
            $ls = ftp_nlist($conn_id, $path_remote_prev);
            
            // se non è presente la creo
            if(!in_array($path_remote, $ls)) {
                svn2ftp_log("Creazione cartella: " . $dir);
                ftp_mkdir($conn_id, $dir);
                svn2ftp_log("Creata cartella: " . $dir);
            }
            // se è presente ci entro
            else {
                svn2ftp_log("Ingresso in cartella: " . $dir);
                ftp_chdir($conn_id, $dir);
                svn2ftp_log("Entrato in cartella: " . $dir);
            }
        }
        // se è un file
        elseif($path_remote == $file['remote']) {
            svn2ftp_log("Caricamento file:" . $path_remote);
            ftp_put($conn_id, $path_remote, $path_local, FTP_BINARY);
            svn2ftp_log("Caricato file:" . $path_remote);
        }
        else {
            svn2ftp_log("Nessun file/cartella trovato in locale");
        }
    }
    
    sleep(3);
}

svn2ftp_log("Fine caricamento");

svn2ftp_log("Eliminazione file...");

foreach($files_delete as $file) {
    ftp_chdir($conn_id, $base_ftp);
    $file_remote = substr($file['remote'], strlen($base_ftp));
    $path = explode('/', $file_remote);
    array_shift($path);

    svn2ftp_log("Posizione: " . $path);
    
    $path_local = $base_local;
    $path_remote = $base_ftp;
    
    $is_file = false;
    foreach($path as $dir) {
        
        $ls = ftp_rawlist($conn_id, $path_remote);

        $dirs = array();
        $files = array();
        foreach($ls as $entry) {
            preg_match('/^(.){1}(?:.* [0-9]{2}:[0-9]{2})\s(.*)$/', $entry, $matched);
            if($matched[1] == 'd') {
                $dirs[] = $matched[2];
            }
            else {
                $files[] = $matched[2];
            }
        }

        svn2ftp_log("+++++++++++++++++++");
        print_r($dirs);
        print_r($files);
        svn2ftp_log("+++++++++++++++++++");
        
        $path_local .= '/' . $dir;
        $path_remote .= '/' . $dir;

        svn2ftp_log("File locale: " . $path_local);
        svn2ftp_log("File remoto: " . $path_remote);
        
        // se è una cartella
        if(in_array($dir, $dirs)) {
            svn2ftp_log("Entrata in cartella: " . $dir);
            ftp_chdir($conn_id, $dir);
        }
        else {
            $is_file = true;
            break;
        }
    }
    
    svn2ftp_log("------------------------------");
    svn2ftp_log("File remoto: " . $file_remote);
    svn2ftp_log("Percorso remoto: " . $path_remote);
    
    svn2ftp_log("File esistente? " . ($path_remote == $base_ftp . $file_remote ? 'Sì':'No'));
    
    if($path_remote == $base_ftp . $file_remote) {
        if($is_file) {
            svn2ftp_log("Eliminazione file");
            ftp_delete($conn_id, $path_remote);
        }
        else {
            svn2ftp_log("Eliminazione cartella");
            ftp_rmdir_recursive($conn_id, $path_remote);
        }
    }
    
    sleep(3);
}

svn2ftp_log("Fine eliminazione");

svn2ftp_log("\n************* Completato **************\n");


/*

Funzioni

*/

function ftp_rmdir_recursive($conn_id, $path) 
{
    ftp_chdir($conn_id, $path);

    $ls = ftp_rawlist($conn_id, $path);

    $dirs = array();
    $files = array();
    foreach($ls as $entry) {
        preg_match('/^(.){1}(?:.* [0-9]{2}:[0-9]{2})\s(.*)$/', $entry, $matched);
        if($matched[1] == 'd') {
            $dirs[] = $matched[2];
        }
        else {
            $files[] = $matched[2];
        }
    }

    svn2ftp_log("+++++++++++++++++++");
    svn2ftp_log($dirs);
    svn2ftp_log($files);
    svn2ftp_log("+++++++++++++++++++");

    if(count($files)) {
        foreach($files as $file) {
            ftp_delete($conn_id, $file);
        }
    }

    if(count($dirs)) {
        foreach($dirs as $dir) {
            ftp_rmdir_recursive($conn_id, $path . '/' . $dir);
        }
    }

    ftp_cdup($conn_id);
    ftp_rmdir($conn_id, $path);
}

function ftp_is_dir($ftpcon, $dir)
{
    $original_directory = ftp_pwd($ftpcon);
    if(@ftp_chdir($ftpcon, $dir)) {
        ftp_chdir($ftpcon, $original_directory);
        return true;
    }

    return false;
}

function svn2ftp_log($message) {
    if(is_array($message)) {
        print_r($expression);
        return;
    }
    
    echo $message . "\n";
}

